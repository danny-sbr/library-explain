import{c as S,g as _,_ as f}from"./CodeBlock-DvypjMrG.js";import{o as T,a as P,c as d,b as v,d as x,e as l,w as y,f as g,t as b,F as K}from"./index-DzsSlbU1.js";var C={exports:{}};(function(u,i){(function(r,e){u.exports=e()})(S,function(){var r={attachTo:function(e,t){if(e.scannerDetectionData!==void 0)throw new Error("onScan.js is already initialized for DOM element "+e);var n={onScan:function(a,s){},onScanError:function(a){},onKeyProcess:function(a,s){},onKeyDetect:function(a,s){},onPaste:function(a,s){},keyCodeMapper:function(a){return r.decodeKeyEvent(a)},onScanButtonLongPress:function(){},scanButtonKeyCode:!1,scanButtonLongPressTime:500,timeBeforeScanTest:100,avgTimeByChar:30,minLength:6,suffixKeyCodes:[9,13],prefixKeyCodes:[],ignoreIfFocusOn:!1,stopPropagation:!1,preventDefault:!1,captureEvents:!1,reactToKeydown:!0,reactToPaste:!1,singleScanQty:1};return t=this._mergeOptions(n,t),e.scannerDetectionData={options:t,vars:{firstCharTime:0,lastCharTime:0,accumulatedString:"",testTimer:!1,longPressTimeStart:0,longPressed:!1}},t.reactToPaste===!0&&e.addEventListener("paste",this._handlePaste,t.captureEvents),t.scanButtonKeyCode!==!1&&e.addEventListener("keyup",this._handleKeyUp,t.captureEvents),(t.reactToKeydown===!0||t.scanButtonKeyCode!==!1)&&e.addEventListener("keydown",this._handleKeyDown,t.captureEvents),this},detachFrom:function(e){e.scannerDetectionData.options.reactToPaste&&e.removeEventListener("paste",this._handlePaste),e.scannerDetectionData.options.scanButtonKeyCode!==!1&&e.removeEventListener("keyup",this._handleKeyUp),e.removeEventListener("keydown",this._handleKeyDown),e.scannerDetectionData=void 0},getOptions:function(e){return e.scannerDetectionData.options},setOptions:function(e,t){switch(e.scannerDetectionData.options.reactToPaste){case!0:t.reactToPaste===!1&&e.removeEventListener("paste",this._handlePaste);break;case!1:t.reactToPaste===!0&&e.addEventListener("paste",this._handlePaste);break}switch(e.scannerDetectionData.options.scanButtonKeyCode){case!1:t.scanButtonKeyCode!==!1&&e.addEventListener("keyup",this._handleKeyUp);break;default:t.scanButtonKeyCode===!1&&e.removeEventListener("keyup",this._handleKeyUp);break}return e.scannerDetectionData.options=this._mergeOptions(e.scannerDetectionData.options,t),this._reinitialize(e),this},decodeKeyEvent:function(e){var t=this._getNormalizedKeyNum(e);switch(!0){case(t>=48&&t<=90):case(t>=106&&t<=111):if(e.key!==void 0&&e.key!=="")return e.key;var n=String.fromCharCode(t);switch(e.shiftKey){case!1:n=n.toLowerCase();break;case!0:n=n.toUpperCase();break}return n;case(t>=96&&t<=105):return 0+(t-96)}return""},simulate:function(e,t){return this._reinitialize(e),Array.isArray(t)?t.forEach(function(n){var a={};(typeof n=="object"||typeof n=="function")&&n!==null?a=n:a.keyCode=parseInt(n);var s=new KeyboardEvent("keydown",a);document.dispatchEvent(s)}):this._validateScanCode(e,t),this},_reinitialize:function(e){var t=e.scannerDetectionData.vars;t.firstCharTime=0,t.lastCharTime=0,t.accumulatedString=""},_isFocusOnIgnoredElement:function(e){var t=e.scannerDetectionData.options.ignoreIfFocusOn;if(!t)return!1;var n=document.activeElement;if(Array.isArray(t)){for(var a=0;a<t.length;a++)if(n.matches(t[a])===!0)return!0}else if(n.matches(t))return!0;return!1},_validateScanCode:function(e,t){var n=e.scannerDetectionData,a=n.options,s=n.options.singleScanQty,c=n.vars.firstCharTime,m=n.vars.lastCharTime,o={},p;switch(!0){case t.length<a.minLength:o={message:"Receieved code is shorter then minimal length"};break;case m-c>t.length*a.avgTimeByChar:o={message:"Receieved code was not entered in time"};break;default:return a.onScan.call(e,t,s),p=new CustomEvent("scan",{detail:{scanCode:t,qty:s}}),e.dispatchEvent(p),r._reinitialize(e),!0}return o.scanCode=t,o.scanDuration=m-c,o.avgTimeByChar=a.avgTimeByChar,o.minLength=a.minLength,a.onScanError.call(e,o),p=new CustomEvent("scanError",{detail:o}),e.dispatchEvent(p),r._reinitialize(e),!1},_mergeOptions:function(e,t){var n={},a;for(a in e)Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);for(a in t)Object.prototype.hasOwnProperty.call(t,a)&&(n[a]=t[a]);return n},_getNormalizedKeyNum:function(e){return e.which||e.keyCode},_handleKeyDown:function(e){var t=r._getNormalizedKeyNum(e),n=this.scannerDetectionData.options,a=this.scannerDetectionData.vars,s=!1;if(n.onKeyDetect.call(this,t,e)!==!1&&!r._isFocusOnIgnoredElement(this)){if(n.scanButtonKeyCode!==!1&&t==n.scanButtonKeyCode){a.longPressed||(a.longPressTimer=setTimeout(n.onScanButtonLongPress,n.scanButtonLongPressTime,this),a.longPressed=!0);return}switch(!0){case(a.firstCharTime&&n.suffixKeyCodes.indexOf(t)!==-1):e.preventDefault(),e.stopImmediatePropagation(),s=!0;break;case(!a.firstCharTime&&n.prefixKeyCodes.indexOf(t)!==-1):e.preventDefault(),e.stopImmediatePropagation(),s=!1;break;default:var c=n.keyCodeMapper.call(this,e);if(c===null)return;a.accumulatedString+=c,n.preventDefault&&e.preventDefault(),n.stopPropagation&&e.stopImmediatePropagation(),s=!1;break}a.firstCharTime||(a.firstCharTime=Date.now()),a.lastCharTime=Date.now(),a.testTimer&&clearTimeout(a.testTimer),s?(r._validateScanCode(this,a.accumulatedString),a.testTimer=!1):a.testTimer=setTimeout(r._validateScanCode,n.timeBeforeScanTest,this,a.accumulatedString),n.onKeyProcess.call(this,c,e)}},_handlePaste:function(e){var t=this.scannerDetectionData.options,n=this.scannerDetectionData.vars,a=(event.clipboardData||window.clipboardData).getData("text");r._isFocusOnIgnoredElement(this)||(e.preventDefault(),t.stopPropagation&&e.stopImmediatePropagation(),t.onPaste.call(this,a,event),n.firstCharTime=0,n.lastCharTime=0,r._validateScanCode(this,a))},_handleKeyUp:function(e){if(!r._isFocusOnIgnoredElement(this)){var t=r._getNormalizedKeyNum(e);t==this.scannerDetectionData.options.scanButtonKeyCode&&(clearTimeout(this.scannerDetectionData.vars.longPressTimer),this.scannerDetectionData.vars.longPressed=!1)}},isScanInProgressFor:function(e){return e.scannerDetectionData.vars.firstCharTime>0},isAttachedTo:function(e){return e.scannerDetectionData!==void 0}};return r})})(C);var D=C.exports;const h=_(D),k={__name:"MyScan",setup(u){return T(()=>{const i={onScan:function(r,e){console.log("Scanned: "+e+"x "+r)},onScanButtonLongPress:function(){console.log("Scan button long press detected")},onScanError:function(r){console.error("Scan error:",r)},onKeyDetect:function(r,e){return console.log("onKeyDetect oEvent",e),console.log("Key detected:",r),r!==27},onKeyProcess:function(r,e){console.log("onKeyProcess oEvent",e),console.log("Processing character:",r)},onPaste:function(r,e){console.log("onPaste",e),console.log("Pasted text detected:",r)},keyCodeMapper:function(r){console.log("keyCodeMapper oEvent",r);const e=h.decodeKeyEvent(r);return console.log("keyCodeMapper char",e),e!==null?e:null},timeBeforeScanTest:100,avgTimeByChar:30,minLength:6,suffixKeyCodes:[9,13],prefixKeyCodes:[],ignoreIfFocusOn:"input, textarea",scanButtonKeyCode:112,scanButtonLongPressTime:500,stopPropagation:!0,preventDefault:!0,captureEvents:!0,singleScanQty:1,reactToKeydown:!0,reactToPaste:!1};h.attachTo(document,i)}),P(()=>{h.detachFrom(document)}),(i,r)=>r[0]||(r[0]=d('<h1 class="text-center">條碼掃描器功能展示</h1><div class="max-w-[600px] mx-auto p-5"><div class="bg-gray-100 p-4 rounded-lg mb-4"><p class="mb-4">請在下方輸入框進行測試：</p><ul class="pl-5 text-gray-600 space-y-6 list-disc"><li>可以使用實體條碼掃描器掃描</li><li>可以直接用鍵盤輸入文字</li><li>按下 F12 開啟瀏覽器開發者工具</li><li>切換到 Console 頁籤查看事件觸發的詳細資訊</li></ul></div><input type="text" id="reader" placeholder="請在此處掃描或輸入" class="w-full p-2.5 text-base border-2 border-gray-300 rounded mt-2.5 focus:border-green-500 focus:outline-none"></div>',2))}},w={class:"container mx-auto px-4"},E=`// 啟用整個文件的掃描事件
onScan.attachTo(document);
// 註冊事件監聽器
document.addEventListener('scan', function(sScancode, iQuantity) {
    alert(iQuantity + 'x ' + sScancode); 
});`,B=`// 使用選項進行初始化
onScan.attachTo(document, {
    suffixKeyCodes: [13], // 預期掃描結束時為 Enter 鍵
    reactToPaste: true, // 支援貼上模式的內建掃描器（非鍵盤模式）
    onScan: function(sCode, iQty) { // 替代 document.addEventListener('scan')
        console.log('Scanned: ' + iQty + 'x ' + sCode); 
    },
    onKeyDetect: function(iKeyCode) { // 輸出所有可能相關的按鍵事件，用於除錯
        console.log('Pressed: ' + iKeyCode);
    }
});

// 程式模擬掃描以測試事件處理器
onScan.simulate(document, '1234567890123');

// 模擬按鍵代碼
onScan.simulate(document, [48,49,50]);

// 模擬 keydown 事件
onScan.simulate(document, [{keyCode:80, key:'P', shiftKey:true}, {keyCode:49,key:'1'}]);

// 動態更改選項
onScan.setOptions(document, {
    singleScanQty: 5 // 將每次掃描的數量設置為 5
});

// 完全移除 DOM 元素的 onScan.js 設定
onScan.detachFrom(document);`,L=`onScan.attachTo(document, {
    onScan: function(sScanned, iQty) { ... },
    keyCodeMapper: function(oEvent) {
        // 若偵測到特殊按鍵程式碼
        if (oEvent.which == 'your_special_key_code') {
            return 'xxx';
        }
        // 其餘情況回傳預設解碼
        return onScan.decodeKeyEvent(oEvent);
    }
});`,F={__name:"ExplainScan",setup(u){return(i,r)=>(v(),x("div",w,[r[0]||(r[0]=d('<h1 class="text-3xl font-bold mb-4">onScan.js</h1><p class="mb-6"> 框架無關的 JavaScript 掃描事件函式庫，適用於硬體條碼掃描器。 </p><h2 class="text-2xl font-semibold mb-4">快速入門</h2><ol class="list-decimal pl-6 mb-6"><li class="mb-2"> 透過 <code class="bg-gray-100 px-1 rounded">npm install onscan.js</code> 或 <code class="bg-gray-100 px-1 rounded">bower install onscan-js</code> 安裝 </li><li class="mb-2"> 包含 <code class="bg-gray-100 px-1 rounded">onscan.min.js</code> 至您的腳本 </li><li class="mb-2">在頁面或檢視載入時，加入以下初始化程式碼</li></ol>',4)),l(f,null,{default:y(()=>[g(b(E))]),_:1}),r[1]||(r[1]=d('<h2 class="text-2xl font-semibold mt-8 mb-4">Demo &amp; 操作範例</h2><p class="mb-6"><a href="https://a.kabachnik.info/onscan-js-playground.html" target="_blank" class="text-blue-600 hover:text-blue-800">線上 demo</a><br> 此外，安裝包中包含類似的 demo，可在本機的 lib 資料夾中載入 <code class="bg-gray-100 px-1 rounded">index.html</code> 進行測試。 </p><h2 class="text-2xl font-semibold mb-4">需求條件</h2><ol class="list-decimal pl-6 mb-6"><li class="mb-2"> 一台硬體條碼掃描器，並且符合以下任一條件： <ul class="list-disc pl-6 mt-2"><li>以鍵盤模式運行（常稱為鍵盤楔模式）</li><li>或以貼上（粘貼）模式運行</li></ul></li><li>現代瀏覽器（IE9+）</li></ol><h2 class="text-2xl font-semibold mb-4">運作原理</h2><p class="mb-4"> onScan.js 透過測量輸入速度、檢查前綴和後綴字元等方式，區分一般輸入和掃描輸入。若偵測到掃描動作，會觸發在初始化時指定的 DOM 元素上的自訂 JavaScript 事件 <code class="bg-gray-100 px-1 rounded">scan</code>。 </p><p class="mb-4"> 有許多選項可微調偵測特定的掃描器型號。並且包含一些有用的額外功能（部分需要特定的硬體）： </p><ul class="list-disc pl-6 mb-6"><li>傳遞一個計數器隨著掃描程式碼一同返回</li><li>若內建掃描按鈕長按一段時間，可加入第二個動作</li></ul><h2 class="text-2xl font-semibold mb-4">範例</h2>',9)),l(f,null,{default:y(()=>[g(b(B))]),_:1}),r[2]||(r[2]=d('<h2 class="text-2xl font-semibold mb-4">選項</h2><p class="mb-4">初始化 onScan.js 時可設定以下選項：</p><div class="overflow-x-auto"><table class="w-full border-collapse mb-6"><thead><tr class="bg-gray-100"><th class="border border-gray-300 p-2 text-left">選項</th><th class="border border-gray-300 p-2 text-left">預設值</th><th class="border border-gray-300 p-2 text-left">說明</th></tr></thead><tbody><tr><td class="border border-gray-300 p-2">onScan</td><td class="border border-gray-300 p-2"><code class="bg-gray-100 px-1 rounded">function(sScanned, iQty){}</code></td><td class="border border-gray-300 p-2"> 掃描成功後的回呼函式<br>參數：<br>- <code class="bg-gray-100 px-1 rounded">sScanned</code> - 掃描的程式碼<br>- <code class="bg-gray-100 px-1 rounded">iQty</code> - 數量 </td></tr><tr><td class="border border-gray-300 p-2">onScanButtonLongPress</td><td class="border border-gray-300 p-2"><code class="bg-gray-100 px-1 rounded">function(){}</code></td><td class="border border-gray-300 p-2"> 當掃描按鈕按住不放到達 <code class="bg-gray-100 px-1 rounded">scanButtonLongPressThreshold</code> 所定義的時間後觸發。此功能僅當掃描按鈕作為鍵本身並設置 <code class="bg-gray-100 px-1 rounded">scanButtonKeyCode</code> 時有效。 </td></tr><tr><td class="border border-gray-300 p-2">onScanError</td><td class="border border-gray-300 p-2"><code class="bg-gray-100 px-1 rounded">function(oDebug){}</code></td><td class="border border-gray-300 p-2"> 當掃描的字串因某些限制被丟棄時的回呼函式<br>參數：<br>- <code class="bg-gray-100 px-1 rounded">oDebug</code> - 包含除錯資料的物件 </td></tr></tbody></table></div><h2 class="text-2xl font-semibold mb-4">方法</h2><div class="overflow-x-auto"><table class="w-full border-collapse mb-6"><thead><tr class="bg-gray-100"><th class="border border-gray-300 p-2 text-left">方法</th><th class="border border-gray-300 p-2 text-left">參數</th><th class="border border-gray-300 p-2 text-left">說明</th></tr></thead><tbody><tr><td class="border border-gray-300 p-2">attachTo</td><td class="border border-gray-300 p-2">DOMElement, oOptions</td><td class="border border-gray-300 p-2"> 初始化並監聽指定 DOM 元素的掃描事件。使用 <code class="bg-gray-100 px-1 rounded">document</code> 來處理所有可能的事件，這是大多數情況下的最佳選擇。 </td></tr><tr><td class="border border-gray-300 p-2">detachFrom</td><td class="border border-gray-300 p-2">DOMElement</td><td class="border border-gray-300 p-2"> 移除指定 DOM 元素的所有掃描器偵測邏輯。 </td></tr><tr><td class="border border-gray-300 p-2">simulate</td><td class="border border-gray-300 p-2"> DOMElement, mStringOrArray </td><td class="border border-gray-300 p-2"> 為指定的掃描程式碼觸發 <code class="bg-gray-100 px-1 rounded">scan</code> 事件，用於手動觸發監聽器（例如測試用）。 </td></tr></tbody></table></div><h2 class="text-2xl font-semibold mb-4">解碼按鍵程式碼</h2><p class="mb-4"> onScan.js 預設會忽略不符合字母或數字的按鍵程式碼。若遇到特別的字元，您可以自訂 <code class="bg-gray-100 px-1 rounded">keyCodeMapper</code> 函式來調整解碼方式，例如： </p>',7)),l(f,null,{default:y(()=>[g(b(L))]),_:1}),r[3]||(r[3]=d('<h2 class="text-2xl font-semibold mb-4">模擬按鍵程式碼</h2><p class="mb-4"> 如果當下沒有條碼掃描器，您可以透過 <code class="bg-gray-100 px-1 rounded">onScan.simulate()</code> 以程式碼模擬鍵盤事件。 </p><p class="mb-4">您可以使用以下格式傳遞掃描程式碼：</p><ul class="list-disc pl-6 mb-6"><li class="mb-2">字串 - 直接傳入一組已解碼的字串</li><li class="mb-2"> 按鍵程式碼陣列 - 如 <code class="bg-gray-100 px-1 rounded">[70, 71, 80]</code>，會產生對應的 <code class="bg-gray-100 px-1 rounded">keydown</code> 事件 </li><li class="mb-2"> 事件物件陣列 - 如 <code class="bg-gray-100 px-1 rounded">[{keyCode: 70, key: &quot;F&quot;, shiftKey: true}, {keyCode: 71, key: &quot;g&quot;}]</code>，這樣可以精確模擬事件 </li></ul>',4))]))}},j={__name:"OnScanView",setup(u){return(i,r)=>(v(),x(K,null,[l(k),l(F)],64))}};export{j as default};
